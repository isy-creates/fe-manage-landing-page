@import url("https://fonts.googleapis.com/css2?family=Be+Vietnam:wght@400;500;700&display=swap");
html {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
}

*,
*::before,
*::after {
  -webkit-box-sizing: inherit;
          box-sizing: inherit;
}

html {
  line-height: 1.15;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

body {
  margin: 0;
}

main {
  display: block;
}

hr {
  -webkit-box-sizing: content-box;
          box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */
}

pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

a {
  background-color: transparent;
  text-decoration: none;
  color: inherit;
}

abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
  /* 2 */
}

h1, h2, h3, h4, h5, h6 {
  margin: 0;
  padding: 0;
  font-size: inherit;
  font-weight: inherit;
}

b,
strong {
  font-weight: bolder;
}

code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

code {
  background-color: rgba(0, 0, 0, 0.2);
  padding: 0 4px;
  border-radius: 3px;
}

ul, ol, dd {
  padding: 0;
}

kbd {
  background-color: #eee;
  border-radius: 3px;
  border: 1px solid #b4b4b4;
  -webkit-box-shadow: 0 1px 1px rgba(0, 0, 0, 0.2), 0 2px 0 0 rgba(255, 255, 255, 0.7) inset;
          box-shadow: 0 1px 1px rgba(0, 0, 0, 0.2), 0 2px 0 0 rgba(255, 255, 255, 0.7) inset;
  color: inherit;
  display: inline-block;
  font-weight: 700;
  padding: 2px 4px;
}

small {
  font-size: 80%;
}

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

img {
  border-style: none;
  vertical-align: middle;
}

figure,
p,
ul, ol, dd {
  margin: 0;
}

button,
input,
optgroup,
select,
textarea {
  font-family: inherit;
  font-size: 100%;
  line-height: 1.15;
  margin: 0;
}

button {
  background-color: none;
  color: inherit;
  cursor: pointer;
}

button,
input {
  /* 1 */
  overflow: visible;
}

button,
select {
  /* 1 */
  text-transform: none;
}

button,
[type=button],
[type=reset],
[type=submit] {
  -webkit-appearance: button;
}

button::-moz-focus-inner,
[type=button]::-moz-focus-inner,
[type=reset]::-moz-focus-inner,
[type=submit]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

button:-moz-focusring,
[type=button]:-moz-focusring,
[type=reset]:-moz-focusring,
[type=submit]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

fieldset {
  padding: 0;
  margin: 0;
  border-width: 0;
}

legend {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */
}

progress {
  vertical-align: baseline;
}

textarea {
  overflow: auto;
}

label {
  display: block;
}

[type=checkbox],
[type=radio] {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

[type=number]::-webkit-inner-spin-button,
[type=number]::-webkit-outer-spin-button {
  height: auto;
}

[type=search] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
}

[type=search]::-webkit-search-decoration {
  -webkit-appearance: none;
}

::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}

[type=submit],
[type=button],
[type=reset] {
  cursor: pointer;
}

*:disabled {
  cursor: not-allowed;
}

button:disabled {
  color: rgba(16, 16, 16, 0.3);
}

details {
  display: block;
}

summary {
  display: list-item;
}

template {
  display: none;
}

[hidden] {
  display: none;
}

th {
  text-align: left;
}

body {
  font-family: "Be Vietnam", sans-serif;
  font-size: 1rem;
  line-height: 1.5;
}

h1, h2, h3, h4, h5, h5 {
  font-weight: 700;
  color: #242d52;
}

h1 {
  font-size: clamp(2.5rem, 2.0117rem + 2.0888vw, 3.5rem);
}

h2 {
  font-size: clamp(size-m, 5.7324rem + -3.1332vw, size-l);
}

h3 {
  font-size: 2.625rem;
}

h4 {
  font-size: 2.625rem;
}

h5 {
  font-size: 2.625rem;
}

h6 {
  font-size: 2.625rem;
}

.has-grid {
  display: grid;
  gap: 7.3125rem;
}
@media (min-width: 1024px) {
  .has-grid {
    grid-template-columns: minmax(auto, 436px) minmax(auto, 540px);
  }
}

@media (min-width: 1024px) {
  .is-tall {
    grid-row: span 2/auto;
  }

  .is-wide {
    grid-column: span 2/auto;
  }
}
.section {
  padding: 3rem 0;
}
@media (min-width: 1024px) {
  .section {
    padding: 4.125rem 0;
  }
}

.with-large-container {
  margin: 0 auto;
  width: 100%;
}

.with-large-container {
  max-width: 69.4375rem;
  padding: 0 1.5rem;
}
@media (min-width: 1024px) {
  .with-large-container {
    padding: 0;
  }
}

.template-with-one-column {
  display: grid;
}

.template-with-one-column {
  grid-gap: 7.3125rem;
  grid-template-rows: [nav] auto [main] auto [footer] auto;
}

.header {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.has-background-color {
  background-color: rgba(249, 190, 214, 0.5);
}

.hamburger-menu {
  width: 1rem;
  z-index: 500;
}
.hamburger-menu:hover {
  cursor: pointer;
}
.hamburger-menu > span {
  display: block;
  height: 4px;
  background-color: #242d52;
  width: 25px;
  -webkit-transition: all 0.3s ease-in-out;
  transition: all 0.3s ease-in-out;
}
.hamburger-menu > span:not(:last-of-type) {
  margin-bottom: 3px;
}
.hamburger-menu.is--open span:nth-child(1) {
  -webkit-transform: rotate(45deg);
          transform: rotate(45deg);
  -webkit-transform-origin: top left;
          transform-origin: top left;
  width: 27px;
}
.hamburger-menu.is--open span:nth-child(2) {
  opacity: 0;
  width: 0;
}
.hamburger-menu.is--open span:nth-child(3) {
  -webkit-transform: rotate(-45deg);
          transform: rotate(-45deg);
  -webkit-transform-origin: bottom left;
          transform-origin: bottom left;
  width: 27px;
}
@media (min-width: 1024px) {
  .hamburger-menu {
    display: none;
  }
}

.navigation {
  display: none;
}
@media (min-width: 1024px) {
  .navigation {
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
  }
}
.navigation__link {
  font-weight: 500;
  -webkit-transition: color 0.3s ease-in-out;
  transition: color 0.3s ease-in-out;
}
.navigation__link:not(:last-of-type) {
  margin-right: 2rem;
}
.navigation__link:hover {
  color: #9095a7;
}

.card {
  background-color: #ffffff;
  border-radius: 0.3125rem;
  -webkit-box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
          box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
  border: 1px solid #ffffff;
  padding: 2rem;
}
.card--height {
  height: 41.125rem;
}

@media (min-width: 1024px) {
  .hero .image {
    grid-column: 2;
    grid-row: 1;
  }
}

.header {
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
      -ms-flex-pack: justify;
          justify-content: space-between;
  -webkit-box-align: center;
  -webkit-align-items: center;
      -ms-flex-align: center;
          align-items: center;
  margin-top: 2.5rem;
}
@media (min-width: 1024px) {
  .header {
    margin-top: 4.5rem;
  }
}
.header__logo {
  width: 100%;
  max-width: 6.8125rem;
}
@media (min-width: 1024px) {
  .header__logo {
    max-width: 9.125rem;
  }
}

.footer {
  display: grid;
}
@media (min-width: 1024px) {
  .footer {
    grid-template-columns: minmax(auto, 165px) minmax(auto, 388px) minmax(auto, 318px);
  }
  .footer__newsletter {
    grid-column: 3;
    grid-row: 1;
  }
  .footer__links {
    grid-column: 2;
    grid-row: 1;
  }
  .footer__social {
    grid-column: 1;
    grid-row: 2;
  }
  .footer__logo {
    grid-column: 1;
    grid-row: 1;
  }
  .footer__copyright {
    grid-column: 3;
    grid-row: 2;
  }
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
